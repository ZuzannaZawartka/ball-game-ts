/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./script.ts":
/*!*******************!*\
  !*** ./script.ts ***!
  \*******************/
/***/ (function() {

eval("var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Square = /** @class */ (function () {\n    function Square(theID, theSize, theText, theCordX, theCordY) {\n        this.isChecked = false;\n        this.isObstacle = false;\n        this.id = theID;\n        this.size = theSize;\n        this.text = (theText).toString();\n        this.cords = { x: theCordX, y: theCordY };\n    }\n    Square.prototype.create = function () {\n        var element = document.createElement(\"div\");\n        element.id = (this.id).toString();\n        element.classList.add(\"point\");\n        element.innerText = (this.text).toString();\n        element.setAttribute('style', \"width: \".concat(this.size, \"px; height: \").concat(this.size, \"px; border:1px solid black\"));\n        return element;\n    };\n    Square.prototype.checkIsAvailable = function () {\n        var element = document.getElementById(this.id.toString());\n        if (element != ( false || null))\n            return element;\n        else\n            return null;\n    };\n    Square.prototype.setObstacle = function () {\n        var obstacleElem = this.checkIsAvailable();\n        if (obstacleElem && !this.isObstacle && !this.isChecked) {\n            this.isObstacle = true;\n            this.text = \"X\";\n            obstacleElem.innerHTML = this.text;\n            return true;\n        }\n        return false;\n    };\n    Square.prototype.setAsStartEnd = function (name) {\n        var obstacleElem = this.checkIsAvailable();\n        if (obstacleElem && !this.isObstacle && !this.isChecked) {\n            if (name == \"START\" || name == \"END\") {\n                this.text = name;\n                obstacleElem.style.backgroundColor = \"red\";\n                obstacleElem.innerHTML = this.text;\n                this.isChecked = true;\n                return true;\n            }\n            return false;\n        }\n    };\n    return Square;\n}());\nvar SquareList = /** @class */ (function () {\n    function SquareList(theQuantity, theSizeOfSquare) {\n        var _this = this;\n        this.elementFinder = function (arr, target) {\n            var element = _this.squareList[0][0];\n            arr.forEach(function (row, i) {\n                var elementInRow = row.find(function (element) { return element.id == target; });\n                if (elementInRow)\n                    element = elementInRow;\n            });\n            return element;\n        };\n        this.quantity = theQuantity;\n        this.sizeOfSquare = theSizeOfSquare;\n        this.startEndObject = [];\n        this.squareList = [];\n        this.makeBoard();\n        this.addListener();\n    }\n    SquareList.prototype.makeBoard = function () {\n        var _a;\n        var count = 0;\n        for (var i = 0; i < this.quantity; i++) {\n            this.squareList[i] = [];\n            for (var j = 0; j < this.quantity; j++) {\n                var square = new Square(count++, this.sizeOfSquare, 0, i, j);\n                this.squareList[i][j] = square;\n                (_a = document.getElementById('root')) === null || _a === void 0 ? void 0 : _a.appendChild(square.create());\n            }\n        }\n        console.log(this.squareList);\n    };\n    SquareList.prototype.addListener = function () {\n        var _this = this;\n        document.addEventListener('click', function (e) {\n            var _a, _b;\n            if (e.target.classList.contains('point') && _this.startEndObject.length < 2) {\n                var id = parseInt(e.target.id);\n                if (_this.startEndObject.length < 1) {\n                    if ((_a = _this.elementFinder(_this.squareList, id)) === null || _a === void 0 ? void 0 : _a.setAsStartEnd(\"START\"))\n                        _this.startEndObject.push(id);\n                }\n                else if ((_b = _this.elementFinder(_this.squareList, id)) === null || _b === void 0 ? void 0 : _b.setAsStartEnd(\"END\")) {\n                    _this.startEndObject.push(id);\n                }\n                // this.squareList.find(element => element.id == id)?.setAsStartEnd(\"END\")\n                console.log(_this.startEndObject);\n            }\n        });\n    };\n    SquareList.prototype.generateObstacles = function (numberOfObstacle) {\n        var _a, _b;\n        for (var i = 0; i < numberOfObstacle; i++) {\n            var id = generateRandomInteger(0, this.squareList.length * this.squareList[0].length);\n            console.log(id);\n            var isAvailableObs = (_a = this.elementFinder(this.squareList, id)) === null || _a === void 0 ? void 0 : _a.setObstacle();\n            console.log(isAvailableObs);\n            while (!isAvailableObs) {\n                id = generateRandomInteger(0, this.squareList.length * this.squareList[0].length);\n                console.log(id);\n                isAvailableObs = (_b = this.elementFinder(this.squareList, id)) === null || _b === void 0 ? void 0 : _b.setObstacle();\n                console.log(\"Losowoanie ponowne\");\n            }\n        }\n    };\n    return SquareList;\n}());\nfunction generateRandomInteger(min, max) {\n    return Math.floor(min + Math.random() * (max - min + 1));\n}\nvar PathFinding = /** @class */ (function () {\n    // unevaluatedGPoints = []\n    // evaluatedGPoints = []\n    // path = []\n    function PathFinding(rows, cols) {\n        this.rows = rows;\n        this.cols = cols;\n        this.grid = [];\n    }\n    PathFinding.prototype.heuristic = function (positionA, positionB) {\n        var d1 = Math.abs(positionA.x - positionB.x);\n        var d2 = Math.abs(positionA.y - positionB.y);\n        return d1 + d2;\n    };\n    PathFinding.prototype.pathInit = function () {\n        for (var i = 0; i < this.cols; i++) {\n            this.grid[i] = [];\n            for (var j = 0; j < this.rows; j++) {\n                //this.grid[i][j] = new GridPoint(i, j);\n            }\n        }\n    };\n    PathFinding.prototype.pathFind = function () {\n    };\n    return PathFinding;\n}());\nvar GridPoint = /** @class */ (function (_super) {\n    __extends(GridPoint, _super);\n    // neighbors: []; //poprawy typy\n    //  parent = undefined; //popraw typy\n    function GridPoint(cords) {\n        var _this = _super.call(this, 5, 5) || this;\n        _this.x = cords.x;\n        _this.y = cords.y;\n        _this.finalCost = 0;\n        _this.toGridPointCost = 0;\n        _this.heuristicCost = 0;\n        return _this;\n        //  this.neighbors = any[]\n        //   this.parent = undefined\n    }\n    GridPoint.prototype.updateNeighbors = function () {\n        var i = this.x;\n        var j = this.y;\n        if (i < this.cols - 1) {\n            // this.neighbors.push(this.grid[i + 1][j]);\n        }\n        if (i > 0) {\n            //  this.neighbors.push(this.grid[i - 1][j]);\n        }\n        if (j < this.rows - 1) {\n            //  this.neighbors.push(this.grid[i][j + 1]);\n        }\n        if (j > 0) {\n            //  this.neighbors.push(grid[i][j - 1]);\n        }\n    };\n    return GridPoint;\n}(PathFinding));\nvar x2 = new SquareList(5, 50);\nx2.generateObstacles(3);\n\n\n//# sourceURL=webpack://ball-game-ts/./script.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./script.ts"]();
/******/ 	
/******/ })()
;